// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (runtime)
  directUrl = env("DIRECT_URL") // direct (migrations/CLI)
}

// ─────────────────────────────────────────────────────────────
// EVENTS
// ─────────────────────────────────────────────────────────────
model events {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug       String?
  title      String
  city       String?
  date       DateTime? @db.Date
  image      String?
  logo_url   String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  // relations
  event_sponsors        event_sponsors[]
  event_bag_submissions event_bag_submissions[]
  registrations         registrations[]

  @@index([created_at(sort: Desc)])
  @@index([slug])
}

// ─────────────────────────────────────────────────────────────
// USERS
// ─────────────────────────────────────────────────────────────
model users {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  name          String?
  profile_image String?
  city          String?
  state         String?
  role          String? // 'player' | 'organizer' | 'admin'
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  // relations
  registrations registrations[]
}

// ─────────────────────────────────────────────────────────────
// REGISTRATIONS (event <-> user)
// ─────────────────────────────────────────────────────────────
model registrations {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // relations
  event events @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([user_id])
}

// ─────────────────────────────────────────────────────────────
// SPONSOR DIRECTORY
// ─────────────────────────────────────────────────────────────
model sponsor_companies {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  website    String?
  logo_url   String?
  logo_hash  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // relations
  event_sponsors event_sponsors[]
}

model event_sponsors {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  company_id String   @db.Uuid
  tier       String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // relations
  company sponsor_companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  event   events            @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([event_id, company_id], map: "event_sponsors_event_company_uniq")
  @@index([event_id])
  @@index([company_id])
}

// ─────────────────────────────────────────────────────────────
// BAG SUBMISSIONS (per event)
// ─────────────────────────────────────────────────────────────
model event_bag_submissions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  name       String
  image_url  String?
  status     String   @default("Pending") // "Pending" | "Approved" | "Rejected"
  notes      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // relations
  event events @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
}
