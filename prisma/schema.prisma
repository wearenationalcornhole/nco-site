// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Users
model users {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  name          String?
  profile_image String?
  city          String?
  state         String?
  role          String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  registrations registrations[]
  club_members  club_members[]
}

// Events
model events {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug       String?
  title      String
  city       String?
  date       DateTime? @db.Date
  image      String?
  logo_url   String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  registrations         registrations[]
  sponsors              sponsors[]
  event_sponsors        event_sponsors[]
  event_bag_submissions event_bag_submissions[]
  event_divisions       event_divisions[]

  @@index([created_at(sort: Desc)])
  @@index([slug])
}

// Simple per-event sponsors (legacy)
model sponsors {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  name       String
  url        String?
  logo       String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  events events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([event_id])
}

// Global sponsor companies directory
model sponsor_companies {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  website    String?
  logo_url   String?
  logo_hash  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  event_sponsors event_sponsors[]
}

// Link table: events â†” sponsor_companies
model event_sponsors {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  company_id String   @db.Uuid
  tier       String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  events            events            @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sponsor_companies sponsor_companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([event_id, company_id], map: "event_sponsors_event_company_uniq")
  @@index([event_id])
  @@index([company_id])
}

// Bag submission workflow (per event, uploaded by admin, reviewed by organizer)
model event_bag_submissions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  name       String
  image_url  String?
  status     String   @default("Pending") // Pending | Approved | Rejected
  notes      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  events events @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
}

// If you also have a generic bag_submissions table, keep it here.
// Otherwise it's safe to remove this model.
model bag_submissions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String?  @db.Uuid
  user_id    String?  @db.Uuid
  name       String
  image_url  String?
  status     String? // optional for this generic table
  notes      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

// Registrations
model registrations {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  events events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users  users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([event_id])
  @@index([user_id])
}

// Clubs (for organizer profile + future)
model clubs {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  city       String?
  state      String?
  logo_url   String?
  website    String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  members club_members[]
}

// Club memberships
model club_members {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  club_id   String   @db.Uuid
  user_id   String   @db.Uuid
  role      String?
  joined_at DateTime @default(now()) @db.Timestamptz(6)

  club clubs @relation(fields: [club_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([club_id, user_id], map: "club_members_unique_member_per_club")
  @@index([club_id])
  @@index([user_id])
}

model event_divisions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String   @db.Uuid
  name       String
  cap        Int?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  event                  events                   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_division_members event_division_members[]

  @@unique([event_id, name], map: "event_divisions_unique_name_per_event")
  @@index([event_id])
}

model event_division_members {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  division_id String   @db.Uuid
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  division event_divisions @relation(fields: [division_id], references: [id], onDelete: Cascade)

  @@unique([division_id, user_id], map: "event_division_members_unique_user_per_div")
  @@index([division_id])
}
