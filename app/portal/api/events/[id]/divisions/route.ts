// app/portal/api/events/[id]/divisions/route.ts
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import { getPrisma } from '@/app/lib/safePrisma'
import { devStore } from '@/app/lib/devStore'

/** Shape returned to client */
type Division = {
  id: string
  eventId: string
  name: string
  cap: number | null
  createdAt: string | null
}

/** DB/devStore row shape (snake_case) */
type DivisionRow = {
  id?: string
  event_id: string
  name: string
  cap: number | null
  created_at: string | Date | null
}

function asIso(d: string | Date | null): string | null {
  if (!d) return null
  return d instanceof Date ? d.toISOString() : d
}

/* ─────────────────────────────────────────────────────────────
   GET: list divisions for event
   /portal/api/events/:id/divisions
   ───────────────────────────────────────────────────────────── */
export async function GET(_req: Request, context: any) {
  try {
    const { id: eventId } = context.params as { id: string }
    const prisma = await getPrisma()

    if (prisma) {
      const rows = (await prisma.event_divisions.findMany({
        where: { event_id: eventId },
        orderBy: { created_at: 'desc' },
      })) as unknown as DivisionRow[]

      const out: Division[] = rows.map((r) => ({
        id: r.id!,
        eventId: r.event_id,
        name: r.name,
        cap: r.cap,
        createdAt: asIso(r.created_at),
      }))
      return NextResponse.json(out)
    }

    // dev fallback
    const rows = devStore
      .getAll<DivisionRow>('event_divisions')
      .filter((r) => r.event_id === eventId)
      .sort((a, b) => (asIso(b.created_at) ?? '').localeCompare(asIso(a.created_at) ?? ''))

    const out: Division[] = rows.map((r) => ({
      id: r.id!,
      eventId: r.event_id,
      name: r.name,
      cap: r.cap,
      createdAt: asIso(r.created_at),
    }))
    return NextResponse.json(out)
  } catch (e: any) {
    console.error('GET divisions error:', e)
    return NextResponse.json({ error: 'Server error' }, { status: 500 })
  }
}

/* ─────────────────────────────────────────────────────────────
   POST: create division
   body: { name: string, cap?: number | null }
   /portal/api/events/:id/divisions
   ───────────────────────────────────────────────────────────── */
export async function POST(req: Request, context: any) {
  try {
    const { id: eventId } = context.params as { id: string }
    const body = await req.json().catch(() => ({}))
    const name = String(body?.name ?? '').trim()
    const capVal = body?.cap
    const cap = capVal === null || capVal === undefined || capVal === '' ? null : Number(capVal)
    if (!name) return NextResponse.json({ error: 'name required' }, { status: 400 })
    if (cap !== null && (Number.isNaN(cap) || cap < 0)) {
      return NextResponse.json({ error: 'cap must be a non-negative number or null' }, { status: 400 })
    }

    const prisma = await getPrisma()

    if (prisma) {
      const created = (await prisma.event_divisions.create({
        data: { event_id: eventId, name, cap },
      })) as unknown as DivisionRow

      const out: Division = {
        id: created.id!,
        eventId: created.event_id,
        name: created.name,
        cap: created.cap,
        createdAt: asIso(created.created_at),
      }
      return NextResponse.json(out, { status: 201 })
    }

    // dev fallback (id auto-generated by devStore)
    const created = devStore.upsert<DivisionRow>('event_divisions', {
      event_id: eventId,
      name,
      cap: cap ?? null,
      created_at: new Date(),
    })

    const out: Division = {
      id: created.id!,
      eventId: created.event_id,
      name: created.name,
      cap: created.cap,
      createdAt: asIso(created.created_at),
    }
    return NextResponse.json(out, { status: 201 })
  } catch (e: any) {
    console.error('POST divisions error:', e)
    return NextResponse.json({ error: e?.message ?? 'Invalid payload' }, { status: 400 })
  }
}