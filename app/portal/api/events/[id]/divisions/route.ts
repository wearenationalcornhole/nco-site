// app/portal/api/events/[id]/divisions/route.ts
export const runtime = 'nodejs'

import { NextResponse } from 'next/server'
import { getPrisma } from '@/app/lib/safePrisma'
import { devStore } from '@/app/lib/devStore'

type Division = {
  id: string
  eventId: string
  name: string
  cap: number | null
  createdAt: string | null
}

type DivisionRow = {
  id?: string
  event_id: string
  name: string
  cap: number | null
  created_at: string | Date | null
}

function asIso(d: string | Date | null): string | null {
  if (!d) return null
  return d instanceof Date ? d.toISOString() : d
}

// GET /portal/api/events/:id/divisions
export async function GET(
  _req: Request,
  ctx: { params: Promise<{ id: string }> }
) {
  try {
    const { id: eventId } = await ctx.params
    const prisma = await getPrisma()

    if (prisma) {
      const rows = (await prisma.event_divisions.findMany({
        where: { event_id: eventId },
        orderBy: { created_at: 'desc' },
      })) as unknown as DivisionRow[]

      const out: Division[] = rows.map((r) => ({
        id: r.id!, // Prisma rows have id
        eventId: r.event_id,
        name: r.name,
        cap: r.cap,
        createdAt: asIso(r.created_at),
      }))
      return NextResponse.json(out)
    }

    // dev fallback
    const rows = devStore
      .getAll<DivisionRow>('event_divisions' as any)
      .filter((d) => d.event_id === eventId)
      .sort((a, b) => (asIso(b.created_at) ?? '').localeCompare(asIso(a.created_at) ?? ''))

    const out: Division[] = rows.map((r) => ({
      id: r.id!,
      eventId: r.event_id,
      name: r.name,
      cap: r.cap,
      createdAt: asIso(r.created_at),
    }))
    return NextResponse.json(out)
  } catch (e: any) {
    console.error('GET divisions error:', e)
    return NextResponse.json({ error: 'Server error' }, { status: 500 })
  }
}

// POST /portal/api/events/:id/divisions
// body: { name: string; cap?: number | null }
export async function POST(
  req: Request,
  ctx: { params: Promise<{ id: string }> }
) {
  try {
    const { id: eventId } = await ctx.params
    const body = await req.json().catch(() => ({}))
    const name = String(body?.name ?? '').trim()
    const cap =
      body?.cap === null
        ? null
        : typeof body?.cap === 'number'
        ? body.cap
        : undefined

    if (!name) {
      return NextResponse.json({ error: 'name is required' }, { status: 400 })
    }

    const prisma = await getPrisma()
    if (prisma) {
      const created = (await prisma.event_divisions.create({
        data: {
          event_id: eventId,
          name,
          cap: cap ?? null,
        },
      })) as unknown as DivisionRow

      const out: Division = {
        id: created.id!,
        eventId: created.event_id,
        name: created.name,
        cap: created.cap,
        createdAt: asIso(created.created_at),
      }
      return NextResponse.json(out, { status: 201 })
    }

    // dev fallback â€” omit id; devStore will generate it
    const created = devStore.upsert<DivisionRow>('event_divisions' as any, {
      event_id: eventId,
      name,
      cap: cap ?? null,
      created_at: new Date(),
    })

    const out: Division = {
      id: created.id!, // generated by devStore
      eventId: created.event_id,
      name: created.name,
      cap: created.cap,
      createdAt: asIso(created.created_at),
    }
    return NextResponse.json(out, { status: 201 })
  } catch (e: any) {
    console.error('POST divisions error:', e)
    return NextResponse.json({ error: e?.message ?? 'Invalid payload' }, { status: 400 })
  }
}